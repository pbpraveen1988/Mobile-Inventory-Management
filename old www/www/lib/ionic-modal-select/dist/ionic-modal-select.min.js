var modalSelectTemplates=modalSelectTemplates||{};modalSelectTemplates["modal-template-multiple.html"]=' <ion-modal-view class="ionic-select-modal" ng-class="::ui.modalClass">\n    \n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}} MULTIPLE</h1>\n    </ion-header-bar>\n\n    <div class="bar bar-subheader item-input-inset" ng-class="::ui.subHeaderClass" ng-if="ui.hasSearch">\n      <label class="item-input-wrapper">\n        <i class="icon ion-ios-search placeholder-icon"></i>\n        <input type="search" placeholder="{{::ui.searchPlaceholder}}" ng-model="ui.searchValue">\n      </label>\n      <button type="button" class="button button-clear" ng-click="clearSearch()">\n        {{ ui.cancelSearchButton }}\n      </button>\n    </div>\n    \n    <ion-content class="has-header" ng-class="{\'has-subheader\':ui.hasSearch}">\n    <div class="text-center" ng-if="!ui.shortList && !showList" style="padding-top:40px;">\n        <h4 class="muted">{{::ui.loadListMessage}}</h4>\n        <p>\n            <ion-spinner></ion-spinner>\n        </p>\n    </div>\n\n    <div ng-if="showList">\n        <!--collection-repeat mode -->\n        <!-- not working right now -->\n        <!--\n        <div ng-if="!ui.shortList">\n            <div class="list" class="animate-if" >\n                <div class="item item-checkbox" ng-class="ui.itemClass" xng-if="showList" collection-repeat="optionm in options track by optionm[0]">\n                    <label class="checkbox">\n                        <input type="checkbox" ng-model="isChecked[optionm[0]]">\n                    </label>    \n                    <div compile="inner" ng-init="option=optionm[1]" compile-once="true"></div>\n                </div>\n            </div>\n        </div>\n        -->\n        <!-- ng-repeat mode -->\n        <div ng-if="ui.shortList || true">\n            <div class="list">\n                <div class="item item-checkbox" ng-class="ui.itemClass" ng-repeat="optionm in options track by $index">\n                    <label class="checkbox">\n                        <input type="checkbox" ng-model="isChecked[optionm[0]]">\n                    </label>\n                    <div ng-init="option=optionm[1]" compile="inner" compile-once="true"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button class="button button-stable" ng-click="closeModal()">{{ui.cancelButton}}</button>\n        <div class="title" style="padding-top:6px">\n            <button class="button button-navbar" ng-click="setValues()">OK</button>\n        </div>\n        <button ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetValues()">{{ui.resetButton}}</button>\n    </ion-footer-bar>\n</ion-modal-view>\n';var modalSelectTemplates=modalSelectTemplates||{};modalSelectTemplates["modal-template.html"]=' <ion-modal-view class="ionic-select-modal" ng-class="::ui.modalClass">\n    \n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n\n    <div class="bar bar-subheader item-input-inset" ng-class="::ui.subHeaderClass" ng-if="ui.hasSearch">\n      <label class="item-input-wrapper">\n        <i class="icon ion-ios-search placeholder-icon"></i>\n        <input type="search" placeholder="{{::ui.searchPlaceholder}}" ng-model="ui.searchValue">\n      </label>\n      <button type="button" class="button button-clear" ng-click="clearSearch()">\n        {{ ui.cancelSearchButton }}\n      </button>\n    </div>\n\n    <ion-content class="has-header" ng-class="{\'has-subheader\':ui.hasSearch}">\n        <div class="text-center" ng-if="!ui.shortList && !showList" style="padding-top:40px;">\n            <h4 class="muted">{{::ui.loadListMessage}}</h4>\n            <p>\n                <ion-spinner></ion-spinner>\n            </p>\n        </div>\n        <div ng-if="showList">\n            <div ng-if="!ui.shortList">\n                <div class="list" ng-if="showList" class="animate-if">\n                    <div ng-class="{ \'{{::ui.itemClass}}\' : true, \'{{::ui.selectedClass}}\': compareValues(getSelectedValue(option), ui.value) }" collection-repeat="option in options track by $index" ng-click="setOption(option)" ng-class="{\'{{::ui.selectedClass}}\': compareValues(getSelectedValue(option), ui.value) }">\n                        <div compile="inner" compile-once="true"></div>\n                    </div>\n                </div>\n            </div>\n            <div ng-if="ui.shortList">\n                <div class="list">\n                    <div ng-repeat="option in options track by $index" ng-click="setOption(option)" ng-class="{ \'{{::ui.itemClass}}\' : true, \'{{::ui.selectedClass}}\': compareValues(getSelectedValue(option), ui.value) }">\n                        <div compile="inner" compile-once="true"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div ng-if="notFound && options.length == 0">\n            <div compile="notFound" compile-once="true" ng-click="closeModal()"></div>\n        </div>\n\n    </ion-content>\n\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button type="button" class="button button-stable modal-select-close-button" ng-click="closeModal()">{{ui.cancelButton}}</button>\n        <button type="button" ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetValue()">{{ui.resetButton}}</button>\n    </ion-footer-bar>\n\n</ion-modal-view>\n',function(){angular.module("ionic-modal-select",[]).directive("compile",["$compile",function($compile){return function(scope,iElement,iAttrs){var x=scope.$watch(function(scope){return scope.$eval(iAttrs.compile)},function(value){iElement.html(value),$compile(iElement.contents())(scope),"true"===iAttrs.compileOnce&&x()})}}]).directive("modalSelect",["$ionicModal","$timeout","$filter","$parse","$templateCache",function($ionicModal,$timeout,$filter,$parse,$templateCache){return{restrict:"A",require:"ngModel",scope:{initialOptions:"=options",optionGetter:"&",searchFilters:"=searchFilters",searchProperties:"=",onSelect:"&",onSearch:"&",onReset:"&"},link:function(scope,iElement,iAttrs,ngModelController,transclude){function initialOptionsSetup(nv){multiple?(allOptions=nv.map(function(item,idx){return[idx,angular.copy(item)]}),scope.options=angular.copy(allOptions)):(allOptions=angular.copy(nv),scope.options=angular.copy(nv))}function updateListMode(){"true"===iAttrs.useCollectionRepeat?shortList=!1:"false"===iAttrs.useCollectionRepeat?shortList=!0:"undefined"!=typeof scope.options&&(shortList=!!(scope.options.length<shortListBreak)),scope.ui.shortList=shortList}var shortList=!0,shortListBreak=iAttrs.shortListBreak?parseInt(iAttrs.shortListBreak):10,setFromProperty=iAttrs.optionProperty,onOptionSelect=iAttrs.optionGetter,clearSearchOnSelect="false"!==iAttrs.clearSearchOnSelect?!0:!1,searchProperties=scope.searchProperties?scope.searchProperties:!1,multiple=iAttrs.multiple?!0:!1;multiple&&(scope.isChecked={});var multipleNullValue=iAttrs.multipleNullValue?scope.$eval(iAttrs.multipleNullValue):[];scope.ui={modalTitle:iAttrs.modalTitle||"Select an option",okButton:iAttrs.okButton||"OK",hideReset:"true"!==iAttrs.hideReset?!1:!0,resetButton:iAttrs.resetButton||"Reset",cancelButton:iAttrs.cancelButton||"Cancel",loadListMessage:iAttrs.loadListMessage||"Loading",modalClass:iAttrs.modalClass||"",headerFooterClass:iAttrs.headerFooterClass||"bar-stable",value:null,selectedClass:iAttrs.selectedClass||"option-selected",itemClass:iAttrs.itemClass||"item item-text-wrap",searchTemplate:iAttrs.searchTemplate||(multiple?"modal-template-multiple.html":"modal-template.html"),hasSearch:"true"!==iAttrs.hasSearch?!1:!0,searchValue:"",searchPlaceholder:iAttrs.searchPlaceholder||"Search",subHeaderClass:iAttrs.subHeaderClass||"bar-stable",cancelSearchButton:iAttrs.cancelSearchButton||"Clear"};var allOptions=[];if(scope.options=[],iAttrs.optionsExpression){var optionsExpression=iAttrs.optionsExpression,match=optionsExpression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!match)throw new Error("collection-repeat expected expression in form of '_item_ in _collection_[ track by _id_]' but got '"+iAttrs.optionsExpression+"'.");var listExpr=(match[1],match[2]),listGetter=$parse(listExpr),s=iElement.scope();scope.$watch(function(){return listGetter(s)},function(nv,ov){initialOptionsSetup(nv),updateListMode()},!0)}else scope.$watch("initialOptions",function(nv){initialOptionsSetup(nv),updateListMode()});var opt=iElement[0].querySelector(".option");if(!opt)throw new Error({name:"modalSelectError:noOptionTemplate",message:'When using modalSelect directive you must include an element with class "option" to provide a template for your select options.',toString:function(){return this.name+" "+this.message}});scope.inner=angular.element(opt).html(),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode.removeChild(this)}),angular.element(opt).remove();var notFound=iElement[0].querySelector(".not-found");notFound&&(scope.notFound=angular.element(notFound).html(),angular.element(notFound).remove()),ngModelController.$render=function(){scope.ui.value=ngModelController.$viewValue};var getSelectedValue=scope.getSelectedValue=function(option){var val=null;return null===option||void 0===option?option:onOptionSelect?scope.optionGetter({option:option}):val=setFromProperty?option[setFromProperty]:option};scope.setOption=function(option){var oldValue=ngModelController.$viewValue,val=getSelectedValue(option);ngModelController.$setViewValue(val),ngModelController.$render(),scope.onSelect&&scope.onSelect({newValue:val,oldValue:oldValue}),scope.modal.hide().then(function(){scope.showList=!1,scope.ui.hasSearch&&clearSearchOnSelect&&(scope.ui.searchValue="")})},scope.setFilter=function(filterId){angular.forEach(scope.searchFilters,function(filter){filter.id==filterId?filter.active=!filter.active:filter.active=!1}),scope.onSearch&&scope.onSearch({query:scope.ui.searchValue})},scope.unsetValue=function(){$timeout(function(){ngModelController.$setViewValue(""),ngModelController.$render(),scope.modal.hide(),scope.showList=!1,scope.onReset&&angular.isFunction(scope.onReset)&&scope.onReset()})},scope.setValues=function(){var checkedItems=[];angular.forEach(scope.isChecked,function(v,k){v&&checkedItems.push(allOptions[k][1])});var oldValues=ngModelController.$viewValue,vals=checkedItems.map(function(item){return getSelectedValue(item)});ngModelController.$setViewValue(vals),ngModelController.$render(),scope.onSelect&&scope.onSelect({newValue:vals,oldValue:oldValues}),scope.modal.hide().then(function(){scope.showList=!1,scope.ui.hasSearch&&clearSearchOnSelect&&(scope.ui.searchValue="")})},scope.unsetValues=function(){$timeout(function(){ngModelController.$setViewValue(multipleNullValue),ngModelController.$render(),scope.modal.hide(),scope.showList=!1,scope.onReset&&angular.isFunction(scope.onReset)&&scope.onReset()})},scope.closeModal=function(){scope.modal.hide().then(function(){scope.showList=!1})},scope.compareValues=function(a,b){return angular.equals(a,b)};var modalTpl=null;iAttrs.searchTemplate?scope.modal=$ionicModal.fromTemplate($templateCache.get(iAttrs.searchTemplate),{scope:scope}):(modalTpl=multiple?"modal-template-multiple.html":"modal-template.html",scope.modal=$ionicModal.fromTemplate(modalSelectTemplates[modalTpl],{scope:scope})),scope.$on("$destroy",function(){scope.modal.remove()}),iElement.on("click",function(){shortList?(scope.showList=!0,scope.modal.show()):scope.modal.show().then(function(){scope.showList=!0,scope.ui.shortList=shortList})}),scope.ui.hasSearch&&(scope.$watch("ui.searchValue",function(nv){var whatToSearch;if(whatToSearch=multiple?allOptions.map(function(item){return item[1]}):allOptions,iAttrs.onSearch)scope.onSearch({query:nv});else{var filteredOpts=$filter("filter")(whatToSearch,nv,function(actual,expected){if(searchProperties){if("object"==typeof actual)for(var i=0;i<searchProperties.length;i++)if(actual[searchProperties[i]]&&actual[searchProperties[i]].toLowerCase().indexOf(expected.toLowerCase())>=0)return!0;return!1}return actual.toString().toLowerCase().indexOf(expected.toLowerCase())>=0?!0:!1}),oldLen=scope.options.length;if(multiple){var newOpts=[];angular.forEach(filteredOpts,function(item){var originalItem=allOptions.find(function(it){return it[1]==item});originalItem&&newOpts.push(originalItem)}),scope.options=newOpts}else scope.options=filteredOpts;oldLen!=scope.options.length}}),scope.clearSearch=function(){scope.ui.searchValue=""}),ngModelController.$render()}}}])}();